// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∏–∫–∞—Ö –Ω–∞ backend —Å–µ—Ä–≤–µ—Ä

interface ClickData {
  elementTag: string;
  elementId?: string;
  elementClass?: string;
  elementText?: string;
  x: number;
  y: number;
  success: boolean;
  errorMessage?: string;
  userAgent: string;
  screenWidth: number;
  screenHeight: number;
  viewportWidth: number;
  viewportHeight: number;
  devicePixelRatio: number;
  url: string;
  pageTitle: string;
}

interface DiagnosticData {
  diagnosticResults: any;
  elementsFixed?: number;
  pointerEventsFixed?: number;
  cssIssuesFound?: number;
  webviewSettings: any;
  userAgent: string;
  url: string;
}

class ClickTracker {
  private static instance: ClickTracker;
  private backendUrl: string;
  private isEnabled: boolean = true;

  constructor() {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL backend —Å–µ—Ä–≤–µ—Ä–∞
    this.backendUrl = this.getBackendUrl();
    console.log(
      "üîß Click Tracker initialized with backend URL:",
      this.backendUrl
    );
    this.setupClickTracking();
  }

  static getInstance(): ClickTracker {
    if (!ClickTracker.instance) {
      ClickTracker.instance = new ClickTracker();
    }
    return ClickTracker.instance;
  }

  private getBackendUrl(): string {
    // –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost, –≤ –ø—Ä–æ–¥–∞–∫—à–Ω - –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (typeof window !== "undefined") {
      const hostname = window.location.hostname;
      if (hostname === "localhost" || hostname === "127.0.0.1") {
        return "http://localhost:3001";
      }
    }

    // –í –ø—Ä–æ–¥–∞–∫—à–Ω –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
    return process.env.NEXT_PUBLIC_BACKEND_URL || "http://localhost:3001";
  }

  private getDeviceInfo() {
    if (typeof window === "undefined") return {};

    return {
      userAgent: navigator.userAgent,
      screenWidth: window.screen.width,
      screenHeight: window.screen.height,
      viewportWidth: window.innerWidth,
      viewportHeight: window.innerHeight,
      devicePixelRatio: window.devicePixelRatio,
      language: navigator.language,
      platform: navigator.platform,
      isWebView: typeof (window as any).flutter_inappwebview !== "undefined",
      timestamp: new Date().toISOString(),
    };
  }

  private async sendData(endpoint: string, data: any): Promise<boolean> {
    if (!this.isEnabled) return false;

    try {
      console.log(
        `üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ ${this.backendUrl}${endpoint}:`,
        data
      );

      const response = await fetch(`${this.backendUrl}${endpoint}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.warn(
          `‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ ${endpoint}:`,
          response.status,
          errorText
        );
        return false;
      }

      const result = await response.json();
      console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ ${endpoint}:`, result);
      return true;
    } catch (error) {
      console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ ${endpoint}:`, error);
      return false;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∏–∫–µ
  async trackClick(
    element: HTMLElement,
    event: MouseEvent | TouchEvent,
    success: boolean = true,
    errorMessage?: string
  ): Promise<void> {
    const coordinates = this.getEventCoordinates(event);
    const deviceInfo = this.getDeviceInfo();

    const clickData: ClickData = {
      elementTag: element.tagName.toLowerCase(),
      elementId: element.id || undefined,
      elementClass: element.className || undefined,
      elementText: this.getElementText(element),
      x: coordinates.x,
      y: coordinates.y,
      success,
      errorMessage,
      userAgent: navigator.userAgent,
      screenWidth: deviceInfo.screenWidth || 0,
      screenHeight: deviceInfo.screenHeight || 0,
      viewportWidth: deviceInfo.viewportWidth || 0,
      viewportHeight: deviceInfo.viewportHeight || 0,
      devicePixelRatio: deviceInfo.devicePixelRatio || 1,
      url: window.location.href,
      pageTitle: document.title,
    };

    await this.sendData("/api/clicks", clickData);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  async trackDiagnosis(diagnosisResult: any): Promise<void> {
    const deviceInfo = this.getDeviceInfo();

    const diagnosticData: DiagnosticData = {
      diagnosticResults: diagnosisResult,
      elementsFixed: diagnosisResult.fixedElementsCount || 0,
      pointerEventsFixed: diagnosisResult.pointerEventsFixed || 0,
      cssIssuesFound: diagnosisResult.cssIssuesFound || 0,
      webviewSettings: {
        isWebView: deviceInfo.isWebView,
        userAgent: deviceInfo.userAgent,
        ...diagnosisResult.webviewSettings,
      },
      userAgent: navigator.userAgent,
      url: window.location.href,
    };

    await this.sendData("/api/webview-diagnosis", diagnosticData);
  }

  private getEventCoordinates(event: MouseEvent | TouchEvent): {
    x: number;
    y: number;
  } {
    if ("touches" in event && event.touches.length > 0) {
      return {
        x: Math.round(event.touches[0].clientX),
        y: Math.round(event.touches[0].clientY),
      };
    } else if ("clientX" in event) {
      return {
        x: Math.round(event.clientX),
        y: Math.round(event.clientY),
      };
    }
    return { x: 0, y: 0 };
  }

  private getElementText(element: HTMLElement): string {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞, –æ–±—Ä–µ–∑–∞–µ–º –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤
    const text = element.textContent || element.innerText || "";
    return text.trim().substring(0, 100);
  }

  private setupClickTracking(): void {
    if (typeof window === "undefined") return;

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–ª–∏–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const trackClickEvent = (event: MouseEvent | TouchEvent) => {
      const target = event.target as HTMLElement;
      if (!target) return;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º
      const isClickable = target.matches(
        'button, [role="button"], .cursor-pointer, a, [onclick], input[type="button"], input[type="submit"]'
      );

      if (isClickable) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∫–ª–∏–∫–∞
        const computedStyle = window.getComputedStyle(target);
        const hasPointerEventsIssue = computedStyle.pointerEvents === "none";
        const coordinates = this.getEventCoordinates(event);
        const elementAtPoint = document.elementFromPoint(
          coordinates.x,
          coordinates.y
        );
        const hasZIndexIssue = target !== elementAtPoint;

        const success = !hasPointerEventsIssue && !hasZIndexIssue;
        const errorMessage = hasPointerEventsIssue
          ? "pointer-events: none"
          : hasZIndexIssue
          ? "Element covered by another element"
          : undefined;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–∫–µ
        console.log("üñ±Ô∏è Detected click on clickable element:", {
          tag: target.tagName.toLowerCase(),
          id: target.id,
          class: target.className,
          success,
          errorMessage,
        });
        this.trackClick(target, event, success, errorMessage);
      }
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    document.addEventListener("click", trackClickEvent, true);
    document.addEventListener("touchend", trackClickEvent, true);

    console.log("üéØ Click tracking activated for backend:", this.backendUrl);
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  enable(): void {
    this.isEnabled = true;
    console.log("‚úÖ Click tracking enabled");
  }

  disable(): void {
    this.isEnabled = false;
    console.log("‚ùå Click tracking disabled");
  }

  async testConnection(): Promise<boolean> {
    try {
      const response = await fetch(`${this.backendUrl}/health`);
      const result = await response.json();
      console.log("üîó Backend connection test:", result);
      return response.ok;
    } catch (error) {
      console.error("‚ùå Backend connection failed:", error);
      return false;
    }
  }

  // –†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  async sendTestClick(): Promise<void> {
    const testClickData: ClickData = {
      elementTag: "button",
      elementId: "test-button",
      elementClass: "test-class",
      elementText: "Test Click",
      x: 100,
      y: 200,
      success: true,
      errorMessage: undefined,
      userAgent: navigator.userAgent,
      screenWidth: window.screen.width,
      screenHeight: window.screen.height,
      viewportWidth: window.innerWidth,
      viewportHeight: window.innerHeight,
      devicePixelRatio: window.devicePixelRatio,
      url: window.location.href,
      pageTitle: document.title,
    };

    console.log("üß™ Sending test click data...");
    await this.sendData("/api/clicks", testClickData);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton instance
export const clickTracker = ClickTracker.getInstance();

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
if (typeof window !== "undefined") {
  (window as any).clickTracker = clickTracker;
}
