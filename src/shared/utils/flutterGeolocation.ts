// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π –≤ WebView (browser-first, fallback: Flutter)

interface GeolocationResult {
  success: boolean;
  latitude?: number;
  longitude?: number;
  accuracy?: number;
  error?: string;
}

interface GeolocationOptions {
  enableHighAccuracy?: boolean;
  timeout?: number;
  maximumAge?: number;
}

interface FlutterWebViewInterface {
  flutter_inappwebview?: {
    callHandler: (handlerName: string, ...args: unknown[]) => void;
  };
  flutterLocationResult?: (result: GeolocationResult) => void;
}

const getFlutterWindow = (): (Window & FlutterWebViewInterface) | null => {
  if (typeof window === "undefined") return null;
  return window as Window & FlutterWebViewInterface;
};

const isFlutterWebView = (): boolean => {
  const fw = getFlutterWindow();
  return !!fw?.flutter_inappwebview;
};

// ---- Helpers ----
const withTimeout = <T,>(p: Promise<T>, ms: number, onTimeout?: () => void): Promise<T> =>
  new Promise((resolve) => {
    let settled = false;
    const tid = setTimeout(() => {
      if (!settled) {
        onTimeout?.();
        // @ts-expect-error: we resolve to T but caller handles a failure object
        resolve({ success: false, error: "timeout" });
      }
    }, ms);
    p.then((v) => {
      settled = true;
      clearTimeout(tid);
      resolve(v);
    });
  });

// ---- Browser path ----
const getLocationFromBrowser = (
  options: GeolocationOptions = {}
): Promise<GeolocationResult> => {
  return new Promise((resolve) => {
    if (typeof navigator === "undefined" || !navigator.geolocation) {
      resolve({ success: false, error: "Geolocation API not available" });
      return;
    }

    const defaultOptions = {
      enableHighAccuracy: true,
      timeout: 10000,
      maximumAge: 0,
      ...options,
    };

    navigator.geolocation.getCurrentPosition(
      (pos) =>
        resolve({
          success: true,
          latitude: pos.coords.latitude,
          longitude: pos.coords.longitude,
          accuracy: pos.coords.accuracy,
        }),
      (err) => resolve({ success: false, error: err?.message || "error" }),
      defaultOptions
    );
  });
};

// ---- Flutter path (—Å —Ç–∞–π–º–∞—É—Ç–æ–º) ----
const getLocationFromFlutter = (
  options: GeolocationOptions = {}
): Promise<GeolocationResult> => {
  const timeoutMs = options.timeout ?? 10000;

  const p = new Promise<GeolocationResult>((resolve) => {
    const fw = getFlutterWindow();
    if (!fw) {
      resolve({ success: false, error: "Window not available (SSR)" });
      return;
    }

    const onResult = (result: GeolocationResult) => {
      cleanup();
      resolve(result);
    };

    const cleanup = () => {
      try {
        delete fw.flutterLocationResult;
      } catch {}
    };

    // —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–ª–±—ç–∫
    fw.flutterLocationResult = onResult;

    // –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ Flutter (–¥–æ–ª–∂–µ–Ω –¥–µ—Ä–Ω—É—Ç—å window.flutterLocationResult)
    if (fw.flutter_inappwebview) {
      try {
        fw.flutter_inappwebview.callHandler("getCurrentPosition");
      } catch {
        cleanup();
        resolve({ success: false, error: "Flutter callHandler failed" });
      }
    } else {
      cleanup();
      resolve({ success: false, error: "Flutter WebView not available" });
    }
  });

  // –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç–æ–º, —á—Ç–æ–±—ã –Ω–µ –≤–∏—Å–µ—Ç—å, –µ—Å–ª–∏ Flutter –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç
  return withTimeout(p, timeoutMs, () => {
    const fw = getFlutterWindow();
    if (fw) {
      try {
        delete fw.flutterLocationResult;
      } catch {}
    }
  }) as Promise<GeolocationResult>;
};

// ---- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (browser-first) ----
export const getCurrentPosition = async (
  options: GeolocationOptions = {}
): Promise<GeolocationResult> => {
  console.log("üåç getCurrentPosition: browser-first");

  // 1) –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –±—Ä–∞—É–∑–µ—Ä (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≤ WebView, –µ—Å–ª–∏ —É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –µ—Å—Ç—å –ø–µ—Ä–º–∏—à–µ–Ω—ã)
  const browserResult = await getLocationFromBrowser(options);
  if (browserResult.success) return browserResult;

  // 2) –ï—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ ‚Äî –ø—Ä–æ–±—É–µ–º Flutter, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã —Ä–µ–∞–ª—å–Ω–æ –≤ –Ω–µ–º
  if (isFlutterWebView()) {
    console.log("üåç browser failed, trying Flutter");
    const flutterResult = await getLocationFromFlutter(options);
    if (flutterResult.success) return flutterResult;
    // –µ—Å–ª–∏ –∏ Flutter –Ω–µ —Å–º–æ–≥ ‚Äî –≤–µ—Ä–Ω–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ñ–µ–π–ª (—Å –µ–≥–æ –æ—à–∏–±–∫–æ–π)
    return browserResult;
  }

  return browserResult;
};

// ---- –î–æ–ø. —É—Ç–∏–ª–∏—Ç—ã ----
export const isGeolocationAvailable = (): boolean => {
  return isFlutterWebView() || (typeof navigator !== "undefined" && !!navigator.geolocation);
};

export const getMyLocation = async (p: { enableHighAccuracy: boolean; timeout: number }): Promise<{ lat: number; lng: number } | null> => {
  try {
    const result = await getCurrentPosition({
      enableHighAccuracy: true,
      timeout: 15000,
      maximumAge: 0,
    });

    if (result.success && result.latitude != null && result.longitude != null) {
      return { lat: result.latitude, lng: result.longitude };
    } else {
      console.error("üåç –û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:", result.error);
      return null;
    }
  } catch (error) {
    console.error("üåç –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:", error);
    return null;
  }
};

const flutterGeolocation = {
  getCurrentPosition,
  isGeolocationAvailable,
  getMyLocation,
  isFlutterWebView,
};

export default flutterGeolocation;
