// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ Flutter WebView

interface GeolocationResult {
  success: boolean;
  latitude?: number;
  longitude?: number;
  accuracy?: number;
  error?: string;
}

interface GeolocationOptions {
  enableHighAccuracy?: boolean;
  timeout?: number;
  maximumAge?: number;
}

// –†–∞—Å—à–∏—Ä—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Window –¥–ª—è Flutter WebView
interface FlutterWebViewInterface {
  flutter_inappwebview?: {
    callHandler: (handlerName: string, ...args: unknown[]) => void;
  };
  flutterLocationResult?: (result: GeolocationResult) => void;
}

// –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π window –±–µ–∑–æ–ø–∞—Å–Ω–æ
const getFlutterWindow = (): (Window & FlutterWebViewInterface) | null => {
  if (typeof window === "undefined") {
    return null;
  }
  return window as Window & FlutterWebViewInterface;
};

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –º—ã –≤ Flutter WebView
const isFlutterWebView = (): boolean => {
  const flutterWindow = getFlutterWindow();
  return (
    flutterWindow !== null &&
    typeof flutterWindow.flutter_inappwebview !== "undefined"
  );
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Flutter
const getLocationFromFlutter = (): Promise<GeolocationResult> => {
  return new Promise((resolve) => {
    const flutterWindow = getFlutterWindow();

    if (!flutterWindow) {
      resolve({
        success: false,
        error: "Window not available (SSR environment)",
      });
      return;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    flutterWindow.flutterLocationResult = (result: GeolocationResult) => {
      resolve(result);
      // –û—á–∏—â–∞–µ–º callback
      delete flutterWindow.flutterLocationResult;
    };

    // –í—ã–∑—ã–≤–∞–µ–º Flutter handler
    if (flutterWindow.flutter_inappwebview) {
      flutterWindow.flutter_inappwebview.callHandler("getCurrentPosition");
    } else {
      resolve({
        success: false,
        error: "Flutter WebView not available",
      });
    }
  });
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä
const getLocationFromBrowser = (
  options: GeolocationOptions = {}
): Promise<GeolocationResult> => {
  return new Promise((resolve) => {
    if (!navigator.geolocation) {
      resolve({
        success: false,
        error: "Geolocation is not supported by this browser",
      });
      return;
    }

    const defaultOptions = {
      enableHighAccuracy: true,
      timeout: 10000,
      maximumAge: 60000,
      ...options,
    };

    navigator.geolocation.getCurrentPosition(
      (position) => {
        resolve({
          success: true,
          latitude: position.coords.latitude,
          longitude: position.coords.longitude,
          accuracy: position.coords.accuracy,
        });
      },
      (error) => {
        resolve({
          success: false,
          error: error.message,
        });
      },
      defaultOptions
    );
  });
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
export const getCurrentPosition = async (
  options: GeolocationOptions = {}
): Promise<GeolocationResult> => {
  console.log("üåç –ó–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏...");

  // –ï—Å–ª–∏ –º—ã –≤ Flutter WebView, –∏—Å–ø–æ–ª—å–∑—É–µ–º Flutter
  if (isFlutterWebView()) {
    console.log("üåç –ò—Å–ø–æ–ª—å–∑—É–µ–º Flutter –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é");
    const result = await getLocationFromFlutter();

    // –ï—Å–ª–∏ Flutter –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –±—Ä–∞—É–∑–µ—Ä
    if (!result.success) {
      console.log("üåç Flutter –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –ø—Ä–æ–±—É–µ–º –±—Ä–∞—É–∑–µ—Ä");
      return await getLocationFromBrowser(options);
    }

    return result;
  } else {
    // –ï—Å–ª–∏ –Ω–µ –≤ Flutter WebView, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±—Ä–∞—É–∑–µ—Ä
    console.log("üåç –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é");
    return await getLocationFromBrowser(options);
  }
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
export const isGeolocationAvailable = (): boolean => {
  return isFlutterWebView() || !!navigator.geolocation;
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
export const getMyLocation = async (): Promise<{
  lat: number;
  lng: number;
} | null> => {
  try {
    const result = await getCurrentPosition({
      enableHighAccuracy: true,
      timeout: 15000,
      maximumAge: 60000,
    });

    if (result.success && result.latitude && result.longitude) {
      console.log("üåç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞:", result.latitude, result.longitude);
      return {
        lat: result.latitude,
        lng: result.longitude,
      };
    } else {
      console.error("üåç –û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:", result.error);
      return null;
    }
  } catch (error) {
    console.error("üåç –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:", error);
    return null;
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
const flutterGeolocation = {
  getCurrentPosition,
  isGeolocationAvailable,
  getMyLocation,
  isFlutterWebView,
};

export default flutterGeolocation;
