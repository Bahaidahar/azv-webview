// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å—é –≤ Flutter WebView
// –°–ª–µ–¥—É–µ—Ç –ø–ª–∞–Ω—É –∏–∑ custom mode: diagnoseWebView.md

interface DiagnosisResult {
  elementFromPoint: {
    status: "ok" | "blocked" | "error";
    details: string;
    blockedBy?: string;
  };
  cssIssues: {
    pointerEvents: string[];
    zIndex: string[];
    tapHighlight: string[];
  };
  viewport: {
    status: "ok" | "issues";
    meta: string;
    issues: string[];
  };
  scriptLoading: {
    blobScripts: boolean;
    normalScripts: boolean;
    issues: string[];
  };
  webviewSettings: {
    isWebView: boolean;
    touchOptimizations: boolean;
    issues: string[];
  };
}

declare global {
  interface Window {
    flutter_inappwebview?: {
      callHandler: (
        handlerName: string,
        ...args: unknown[]
      ) => Promise<unknown>;
    };
    azvOptimizationsApplied?: boolean;
    webviewDiagnosis?: DiagnosisResult;
  }
}

export class WebViewDiagnosis {
  private static instance: WebViewDiagnosis;

  static getInstance(): WebViewDiagnosis {
    if (!WebViewDiagnosis.instance) {
      WebViewDiagnosis.instance = new WebViewDiagnosis();
    }
    return WebViewDiagnosis.instance;
  }

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ document.elementFromPoint() —Å–æ–≥–ª–∞—Å–Ω–æ custom mode
  private checkElementFromPoint(
    x: number,
    y: number
  ): DiagnosisResult["elementFromPoint"] {
    try {
      const element = document.elementFromPoint(x, y);
      if (!element) {
        return {
          status: "error",
          details: `–≠–ª–µ–º–µ–Ω—Ç –≤ —Ç–æ—á–∫–µ (${x}, ${y}) –Ω–µ –Ω–∞–π–¥–µ–Ω`,
        };
      }

      const tagName = element.tagName.toLowerCase();
      const isClickable = element.matches(
        'button, [role="button"], .cursor-pointer, a, [onclick]'
      );

      if (!isClickable && (tagName === "div" || tagName === "span")) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–∫–∏
        const computedStyle = window.getComputedStyle(element);
        const pointerEvents = computedStyle.pointerEvents;
        const zIndex = computedStyle.zIndex;

        if (pointerEvents === "none") {
          return {
            status: "blocked",
            details: `–≠–ª–µ–º–µ–Ω—Ç ${tagName} –±–ª–æ–∫–∏—Ä—É–µ—Ç –∫–ª–∏–∫–∏ –∏–∑-–∑–∞ pointer-events: none`,
            blockedBy: "pointer-events",
          };
        }

        if (zIndex !== "auto" && parseInt(zIndex) > 1000) {
          return {
            status: "blocked",
            details: `–≠–ª–µ–º–µ–Ω—Ç ${tagName} —Å –≤—ã—Å–æ–∫–∏–º z-index (${zIndex}) –º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–∫–∏`,
            blockedBy: "z-index",
          };
        }
      }

      return {
        status: "ok",
        details: `–≠–ª–µ–º–µ–Ω—Ç: ${tagName}, –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π: ${isClickable}`,
      };
    } catch (error) {
      return {
        status: "error",
        details: `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ elementFromPoint: ${error}`,
      };
    }
  }

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ CSS: pointer-events, z-index, tap-highlight
  private checkCSSIssues(): DiagnosisResult["cssIssues"] {
    const result: DiagnosisResult["cssIssues"] = {
      pointerEvents: [],
      zIndex: [],
      tapHighlight: [],
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const allElements = document.querySelectorAll("*");

    allElements.forEach((element) => {
      const computedStyle = window.getComputedStyle(element);
      const tagName = element.tagName.toLowerCase();

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ pointer-events
      if (
        computedStyle.pointerEvents === "none" &&
        element.matches(
          'button, [role="button"], .cursor-pointer, a, [onclick]'
        )
      ) {
        result.pointerEvents.push(
          `${tagName}: pointer-events: none –Ω–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ`
        );
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ z-index
      const zIndex = computedStyle.zIndex;
      if (zIndex !== "auto" && parseInt(zIndex) > 9999) {
        result.zIndex.push(`${tagName}: –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π z-index (${zIndex})`);
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ tap-highlight
      const tapHighlight = (computedStyle as any).webkitTapHighlightColor;
      if (
        tapHighlight &&
        tapHighlight !== "transparent" &&
        tapHighlight !== "rgba(0, 0, 0, 0)"
      ) {
        result.tapHighlight.push(
          `${tagName}: tap-highlight –Ω–µ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π (${tapHighlight})`
        );
      }
    });

    return result;
  }

  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ <meta viewport>
  private checkViewport(): DiagnosisResult["viewport"] {
    const viewportMeta = document.querySelector(
      'meta[name="viewport"]'
    ) as HTMLMetaElement;

    if (!viewportMeta) {
      return {
        status: "issues",
        meta: "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
        issues: ["Meta viewport —Ç–µ–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"],
      };
    }

    const content = viewportMeta.content || "";
    const issues: string[] = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (!content.includes("width=device-width")) {
      issues.push("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç width=device-width");
    }

    if (!content.includes("initial-scale=1")) {
      issues.push("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç initial-scale=1");
    }

    if (content.includes("user-scalable=no")) {
      issues.push("user-scalable=no –º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Å–∞–Ω–∏—è");
    }

    return {
      status: issues.length > 0 ? "issues" : "ok",
      meta: content,
      issues,
    };
  }

  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤ (blob vs –æ–±—ã—á–Ω—ã–π)
  private checkScriptLoading(): DiagnosisResult["scriptLoading"] {
    const scripts = document.querySelectorAll("script");
    let blobScripts = false;
    let normalScripts = false;
    const issues: string[] = [];

    scripts.forEach((script) => {
      if (script.src) {
        if (script.src.startsWith("blob:")) {
          blobScripts = true;
        } else {
          normalScripts = true;
        }
      }
    });

    if (blobScripts) {
      issues.push(
        "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã blob: —Å–∫—Ä–∏–ø—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ WebView"
      );
    }

    return {
      blobScripts,
      normalScripts,
      issues,
    };
  }

  // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ InAppWebView
  private checkWebViewSettings(): DiagnosisResult["webviewSettings"] {
    const isWebView = typeof window.flutter_inappwebview !== "undefined";
    const touchOptimizations = !!window.azvOptimizationsApplied;
    const issues: string[] = [];

    if (isWebView) {
      if (!touchOptimizations) {
        issues.push("AZV –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–∞—Å–∞–Ω–∏–π –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã");
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
      const docStyle = window.getComputedStyle(document.documentElement);
      if (docStyle.touchAction !== "pan-x pan-y") {
        issues.push(
          `touch-action –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${docStyle.touchAction} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å pan-x pan-y)`
        );
      }
    } else {
      issues.push("–ù–µ –≤ Flutter WebView –æ–∫—Ä—É–∂–µ–Ω–∏–∏");
    }

    return {
      isWebView,
      touchOptimizations,
      issues,
    };
  }

  // –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
  public runFullDiagnosis(
    testPoints?: { x: number; y: number }[]
  ): DiagnosisResult {
    console.log("üîç –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ WebView...");

    const defaultTestPoints = [
      { x: window.innerWidth / 2, y: window.innerHeight / 2 }, // –¶–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞
      { x: 100, y: 100 }, // –õ–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
      { x: window.innerWidth - 100, y: 100 }, // –ü—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
    ];

    const points = testPoints || defaultTestPoints;
    const elementFromPointResults = points.map((point) =>
      this.checkElementFromPoint(point.x, point.y)
    );

    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    const elementFromPoint = elementFromPointResults[0];

    const result: DiagnosisResult = {
      elementFromPoint,
      cssIssues: this.checkCSSIssues(),
      viewport: this.checkViewport(),
      scriptLoading: this.checkScriptLoading(),
      webviewSettings: this.checkWebViewSettings(),
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ window –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    window.webviewDiagnosis = result;

    console.log("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:", result);
    return result;
  }

  // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
  public checkElementClickability(element: HTMLElement): {
    isClickable: boolean;
    issues: string[];
    recommendations: string[];
  } {
    const issues: string[] = [];
    const recommendations: string[] = [];

    const computedStyle = window.getComputedStyle(element);
    const isClickableElement = element.matches(
      'button, [role="button"], .cursor-pointer, a, [onclick]'
    );

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ CSS
    if (computedStyle.pointerEvents === "none") {
      issues.push("pointer-events: none");
      recommendations.push("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å pointer-events: auto");
    }

    if (computedStyle.touchAction === "none") {
      issues.push("touch-action: none");
      recommendations.push("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å touch-action: manipulation");
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π
    const rect = element.getBoundingClientRect();
    const centerX = rect.left + rect.width / 2;
    const centerY = rect.top + rect.height / 2;
    const topElement = document.elementFromPoint(centerX, centerY);

    if (topElement !== element && !element.contains(topElement)) {
      issues.push("–≠–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ–∫—Ä—ã—Ç –¥—Ä—É–≥–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º");
      recommendations.push("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å z-index –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ");
    }

    return {
      isClickable: isClickableElement && issues.length === 0,
      issues,
      recommendations,
    };
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
  public autoFixIssues(): void {
    console.log("üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º...");

    const diagnosis = this.runFullDiagnosis();

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º CSS –ø—Ä–æ–±–ª–µ–º—ã
    diagnosis.cssIssues.pointerEvents.forEach(() => {
      const problematicElements = document.querySelectorAll(
        'button, [role="button"], .cursor-pointer, a, [onclick]'
      );
      problematicElements.forEach((element) => {
        const style = (element as HTMLElement).style;
        if (window.getComputedStyle(element).pointerEvents === "none") {
          style.pointerEvents = "auto";
        }
      });
    });

    // –ü—Ä–∏–º–µ–Ω—è–µ–º touch –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã
    if (!diagnosis.webviewSettings.touchOptimizations) {
      this.applyTouchOptimizations();
    }

    console.log("üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
  }

  private applyTouchOptimizations(): void {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const clickableElements = document.querySelectorAll(
      'button, [role="button"], .cursor-pointer, a, [onclick]'
    );

    clickableElements.forEach((element) => {
      const style = (element as HTMLElement).style as any;
      style.touchAction = "manipulation";
      style.webkitTouchCallout = "none";
      style.webkitTapHighlightColor = "transparent";
      (element as HTMLElement).setAttribute("data-azv-optimized", "true");
    });

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    document.documentElement.style.touchAction = "pan-x pan-y";
    document.body.style.touchAction = "pan-x pan-y";

    window.azvOptimizationsApplied = true;
    console.log("‚úÖ Touch –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã");
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ WebView
if (
  typeof window !== "undefined" &&
  typeof window.flutter_inappwebview !== "undefined"
) {
  // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
  setTimeout(() => {
    const diagnosis = WebViewDiagnosis.getInstance();
    diagnosis.runFullDiagnosis();

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
    diagnosis.autoFixIssues();
  }, 2000);
}

export const webviewDiagnosis = WebViewDiagnosis.getInstance();
