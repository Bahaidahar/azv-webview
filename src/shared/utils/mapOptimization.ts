// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Google Maps

// –î–µ–±–∞—É–Ω—Å —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
export const debounce = <T extends (...args: unknown[]) => unknown>(
  func: T,
  wait: number
): ((...args: Parameters<T>) => void) => {
  let timeout: NodeJS.Timeout | null = null;

  return (...args: Parameters<T>) => {
    if (timeout) {
      clearTimeout(timeout);
    }

    timeout = setTimeout(() => {
      func(...args);
    }, wait);
  };
};

// Throttle —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –≤—ã–∑–æ–≤–æ–≤
export const throttle = <T extends (...args: unknown[]) => unknown>(
  func: T,
  limit: number
): ((...args: Parameters<T>) => void) => {
  let inThrottle: boolean = false;

  return (...args: Parameters<T>) => {
    if (!inThrottle) {
      func(...args);
      inThrottle = true;
      setTimeout(() => {
        inThrottle = false;
      }, limit);
    }
  };
};

// –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π debounce + throttle –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
export const smartDelay = <T extends (...args: unknown[]) => unknown>(
  func: T,
  throttleMs: number,
  debounceMs: number
): ((...args: Parameters<T>) => void) => {
  let debounceTimeout: NodeJS.Timeout | null = null;
  let lastExecTime = 0;

  return (...args: Parameters<T>) => {
    const now = Date.now();

    // –û—á–∏—â–∞–µ–º debounce timeout
    if (debounceTimeout) {
      clearTimeout(debounceTimeout);
    }

    // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å—Ä–∞–∑—É
    if (now - lastExecTime >= throttleMs) {
      func(...args);
      lastExecTime = now;
    } else {
      // –ò–Ω–∞—á–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º debounce
      debounceTimeout = setTimeout(() => {
        func(...args);
        lastExecTime = Date.now();
      }, debounceMs);
    }
  };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
export const calculateDistance = (
  lat1: number,
  lng1: number,
  lat2: number,
  lng2: number
): number => {
  return Math.sqrt(Math.pow(lat2 - lat1, 2) + Math.pow(lng2 - lng1, 2));
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ—á–∫–∞ –≤ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏ –∫–∞—Ä—Ç—ã
export const isPointInBounds = (
  lat: number,
  lng: number,
  bounds: {
    north: number;
    south: number;
    east: number;
    west: number;
  }
): boolean => {
  return (
    lat >= bounds.south &&
    lat <= bounds.north &&
    lng >= bounds.west &&
    lng <= bounds.east
  );
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ö–µ—à–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤
export const createHash = (objects: unknown[]): string => {
  return objects
    .map((obj) => {
      if (typeof obj === "object" && obj !== null) {
        return Object.values(obj as Record<string, unknown>).join("-");
      }
      return String(obj);
    })
    .join("|");
};

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞—Ä–∫–µ—Ä–æ–≤ –ø–æ –∑—É–º—É
export const getOptimizedMarkerSettings = (zoom: number) => {
  const roundedZoom = Math.round(zoom);

  return {
    showNames: roundedZoom >= 11, // –°–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–º–µ–Ω
    showDetails: roundedZoom >= 14,
    enableClustering: roundedZoom < 13, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
    markerSize:
      roundedZoom < 10 ? "small" : roundedZoom < 13 ? "medium" : "large",
    updateFrequency: roundedZoom > 16 ? 15000 : 30000,
    maxMarkers: roundedZoom < 10 ? 30 : roundedZoom < 13 ? 100 : 200,
  };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–∞—Ä–∫–µ—Ä–æ–≤
export const preloadMarkerImages = (imagePaths: string[]): Promise<void[]> => {
  const promises = imagePaths.map((path) => {
    return new Promise<void>((resolve, reject) => {
      const img = new Image();
      img.onload = () => resolve();
      img.onerror = () => reject(new Error(`Failed to load image: ${path}`));
      img.src = path;
    });
  });

  return Promise.all(promises);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ DOM –æ–ø–µ—Ä–∞—Ü–∏–π
export const batchDOMUpdates = (updates: (() => void)[]): void => {
  requestAnimationFrame(() => {
    updates.forEach((update) => update());
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
export const getDevicePerformance = (): "low" | "medium" | "high" => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
  const cores = navigator.hardwareConcurrency || 1;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
  const memory = (navigator as { deviceMemory?: number }).deviceMemory || 1;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –≤ WebView
  const isWebView =
    typeof (window as { flutter_inappwebview?: unknown })
      .flutter_inappwebview !== "undefined";

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const connection = (navigator as { connection?: { effectiveType?: string } })
    .connection;
  const slowConnection =
    connection?.effectiveType === "slow-2g" ||
    connection?.effectiveType === "2g";

  if (isWebView && (cores <= 2 || memory <= 2 || slowConnection)) {
    return "low";
  } else if (cores <= 4 && memory <= 4) {
    return "medium";
  } else {
    return "high";
  }
};

// –£–ª—É—á—à–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
export const getPerformanceSettings = () => {
  const performance = getDevicePerformance();

  switch (performance) {
    case "low":
      return {
        markerUpdateInterval: 45000, // 45 —Å–µ–∫—É–Ω–¥
        zoomDebounceDelay: 300, // –ë–æ–ª—å—à–µ –¥–µ–±–∞—É–Ω—Å –¥–ª—è –∑—É–º–∞
        cameraDebounceDelay: 200,
        maxMarkersVisible: 30,
        enableAnimations: false,
        clusteringEnabled: true,
        minZoomForNames: 13,
        batchSizeLimit: 10,
        enableLazyLoading: true,
      };
    case "medium":
      return {
        markerUpdateInterval: 30000, // 30 —Å–µ–∫—É–Ω–¥
        zoomDebounceDelay: 200,
        cameraDebounceDelay: 150,
        maxMarkersVisible: 80,
        enableAnimations: true,
        clusteringEnabled: true,
        minZoomForNames: 11,
        batchSizeLimit: 25,
        enableLazyLoading: true,
      };
    case "high":
      return {
        markerUpdateInterval: 20000, // 20 —Å–µ–∫—É–Ω–¥
        zoomDebounceDelay: 150,
        cameraDebounceDelay: 100,
        maxMarkersVisible: 150,
        enableAnimations: true,
        clusteringEnabled: false,
        minZoomForNames: 10,
        batchSizeLimit: 50,
        enableLazyLoading: false,
      };
    default:
      return {
        markerUpdateInterval: 30000,
        zoomDebounceDelay: 200,
        cameraDebounceDelay: 150,
        maxMarkersVisible: 80,
        enableAnimations: true,
        clusteringEnabled: true,
        minZoomForNames: 11,
        batchSizeLimit: 25,
        enableLazyLoading: true,
      };
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
export const logPerformance = (operation: string, startTime: number): void => {
  const endTime = performance.now();
  const duration = endTime - startTime;

  if (duration > 200) {
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    console.warn(
      `üêå Very slow operation: ${operation} took ${duration.toFixed(2)}ms`
    );
  } else if (duration > 100) {
    console.warn(
      `‚ö†Ô∏è Slow operation: ${operation} took ${duration.toFixed(2)}ms`
    );
  } else if (duration > 50) {
    console.log(`‚ö° ${operation} took ${duration.toFixed(2)}ms`);
  }
};

// –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –∑—É–º–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–∞–≥–æ–≤
export const createZoomOptimizer = () => {
  let lastZoom = 0;
  let pendingUpdate: NodeJS.Timeout | null = null;
  let isUpdating = false;

  return {
    shouldUpdate: (newZoom: number, threshold = 0.5): boolean => {
      const zoomDiff = Math.abs(newZoom - lastZoom);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
      if (zoomDiff >= threshold && !isUpdating) {
        lastZoom = newZoom;
        return true;
      }

      return false;
    },

    scheduleUpdate: (callback: () => void, delay = 200): void => {
      if (pendingUpdate) {
        clearTimeout(pendingUpdate);
      }

      pendingUpdate = setTimeout(() => {
        isUpdating = true;
        callback();
        isUpdating = false;
        pendingUpdate = null;
      }, delay);
    },

    cleanup: (): void => {
      if (pendingUpdate) {
        clearTimeout(pendingUpdate);
        pendingUpdate = null;
      }
      isUpdating = false;
    },
  };
};

// –•—É–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
export const usePerformanceMonitor = () => {
  const startTime = performance.now();

  return {
    measure: (operation: string) => {
      logPerformance(operation, startTime);
    },
    reset: () => {
      return performance.now();
    },
  };
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∑—É–º–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞
export const getOptimalZoom = (
  bounds: { north: number; south: number; east: number; west: number },
  containerWidth: number,
  containerHeight: number
): number => {
  const WORLD_DIM = { height: 256, width: 256 };
  const ZOOM_MAX = 21;

  function latRad(lat: number) {
    const sin = Math.sin((lat * Math.PI) / 180);
    const radX2 = Math.log((1 + sin) / (1 - sin)) / 2;
    return Math.max(Math.min(radX2, Math.PI), -Math.PI) / 2;
  }

  function zoom(mapPx: number, worldPx: number, fraction: number) {
    return Math.floor(Math.log(mapPx / worldPx / fraction) / Math.LN2);
  }

  const latFraction = (latRad(bounds.north) - latRad(bounds.south)) / Math.PI;
  const lngDiff = bounds.east - bounds.west;
  const lngFraction = (lngDiff < 0 ? lngDiff + 360 : lngDiff) / 360;

  const latZoom = zoom(containerHeight, WORLD_DIM.height, latFraction);
  const lngZoom = zoom(containerWidth, WORLD_DIM.width, lngFraction);

  return Math.min(latZoom, lngZoom, ZOOM_MAX);
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –º–∞—Ä–∫–µ—Ä–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–º –∑—É–º–µ
export const isMarkerVisible = (
  markerLat: number,
  markerLng: number,
  mapBounds: { north: number; south: number; east: number; west: number },
  zoom: number,
  minZoomForVisibility = 8
): boolean => {
  if (zoom < minZoomForVisibility) {
    return false;
  }

  return (
    markerLat <= mapBounds.north &&
    markerLat >= mapBounds.south &&
    markerLng <= mapBounds.east &&
    markerLng >= mapBounds.west
  );
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –º–∞—Ä–∫–µ—Ä–æ–≤ –ø–æ –∑—É–º—É
export const groupMarkersByZoom = <
  T extends { latitude: number; longitude: number }
>(
  markers: T[],
  zoom: number,
  gridSize = 50
): T[][] => {
  if (zoom >= 15) {
    // –ù–∞ –≤—ã—Å–æ–∫–æ–º –∑—É–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–∞—Ä–∫–µ—Ä—ã
    return markers.map((marker) => [marker]);
  }

  const groups: Map<string, T[]> = new Map();
  const scale = Math.pow(2, zoom);

  markers.forEach((marker) => {
    const x = Math.floor((marker.longitude * scale) / gridSize);
    const y = Math.floor((marker.latitude * scale) / gridSize);
    const key = `${x},${y}`;

    if (!groups.has(key)) {
      groups.set(key, []);
    }
    groups.get(key)!.push(marker);
  });

  return Array.from(groups.values());
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –º–∞—Ä–∫–µ—Ä–æ–≤
export const createMarkerUpdateOptimizer = () => {
  let updateTimeout: NodeJS.Timeout | null = null;
  const pendingUpdates: Set<string> = new Set();

  return {
    scheduleUpdate: (markerId: string, updateFn: () => void, delay = 16) => {
      pendingUpdates.add(markerId);

      if (updateTimeout) {
        clearTimeout(updateTimeout);
      }

      updateTimeout = setTimeout(() => {
        const updates = Array.from(pendingUpdates);
        pendingUpdates.clear();

        // –ë–∞—Ç—á–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        requestAnimationFrame(() => {
          updates.forEach(() => updateFn());
        });

        updateTimeout = null;
      }, delay);
    },

    cleanup: () => {
      if (updateTimeout) {
        clearTimeout(updateTimeout);
        updateTimeout = null;
      }
      pendingUpdates.clear();
    },
  };
};

const mapOptimizationUtils = {
  debounce,
  throttle,
  smartDelay,
  calculateDistance,
  isPointInBounds,
  createHash,
  getOptimizedMarkerSettings,
  preloadMarkerImages,
  batchDOMUpdates,
  getDevicePerformance,
  getPerformanceSettings,
  logPerformance,
  usePerformanceMonitor,
  createZoomOptimizer,
  getOptimalZoom,
  isMarkerVisible,
  groupMarkersByZoom,
  createMarkerUpdateOptimizer,
};

export default mapOptimizationUtils;
